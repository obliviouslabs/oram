enclave {
  include "sgx_report.h"
  trusted {
    public void ecall_omap_init(uint64_t N, uint64_t initSize);
    public int ecall_omap_find([in, count=keyLength] uint8_t* key, [out, count=valLength] uint8_t* val, uint32_t keyLength, uint32_t valLength);
    public int ecall_omap_insert([in, count=keyLength] uint8_t* key, [in, count=valLength] uint8_t* val, uint32_t keyLength, uint32_t valLength);
    public int ecall_omap_update([in, count=keyLength] uint8_t* key, [in, count=valLength] uint8_t* val, uint32_t keyLength, uint32_t valLength);
    public void ecall_set_last_block(uint64_t lastBlock);
    public int ecall_omap_delete([in, count=keyLength] uint8_t* key, uint32_t keyLength);
    public uint32_t ecall_gen_key_pair([out] uint8_t pubkey[64], [out] uint8_t sealedPrivKey[1024]);
    public int ecall_set_private_key([in, count=sealedPrivKeySize] uint8_t* sealedPrivKey, uint32_t sealedPrivKeySize);
    public void ecall_handle_encrypted_query([in, count=encryptedQueryLength] uint8_t* encryptedQuery, [out, count=encryptedResponseLength] uint8_t* encryptedResponse, uint32_t encryptedQueryLength, uint32_t encryptedResponseLength);
    public uint32_t enclave_create_report([in]const sgx_target_info_t* p_qe3_target,
                                              [in]const sgx_report_data_t* p_data,
                                              [out]sgx_report_t* p_report);
  };

  untrusted {
    void ocall_FAIL();
    void ocall_print_string([in, string] const char *str);
    uint64_t ocall_measure_time();
    uint8_t* ocall_InitServer(uint64_t sizeOfT, uint64_t N_);
    void ocall_DeleteServer();
    void ocall_Read_Batch(uint64_t batchSize, uint64_t pageBytes, uint64_t totalBytes, [in, count=batchSize] uint64_t* offsets,  [out, count=totalBytes] uint8_t* buffer);
    void ocall_Read(uint64_t pos, uint64_t length, [out, count=length] uint8_t* page);
    void ocall_Write_Batch(uint64_t batchSize, uint64_t pageBytes, uint64_t totalBytes, [in, count=batchSize] uint64_t* offsets,  [in, count=totalBytes] uint8_t* buffer);
    void ocall_Write(uint64_t pos, uint64_t length, [in, count=length] const uint8_t* page);
    uint64_t ocall_Fetch_Next_KV_Batch([out, count=batchBytes]uint8_t* data, uint64_t batchBytes);
  };
};
